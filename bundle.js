(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),s=t.n(a)()(o());s.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Anton&display=swap);"]),s.push([e.id,":root {\n  --purple: #3B1F2B;\n  --red: #DB162F;\n  --cream: #DBDFAC;\n  --light-blue: #5F758E;\n  --dark-blue: #383961;\n}\n\nbody {\n  background-color: var(--light-blue);\n  color: var(--dark-blue);\n  font-family: 'Anton', sans-serif;\n  text-transform: uppercase;\n}\n\nh1 {\n  font-size: 5rem;\n}\n\n#wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5%;\n}\n\n.block {\n  text-align: center;\n}\n\nbutton {\n  font-size: 1.25rem;\n  color: var(--cream);\n  background-color: var(--dark-blue);\n  padding: 1em;\n  border: 5px solid var(--purple);\n  cursor: pointer;\n\n  text-transform: uppercase;\n  font-family: 'Anton', sans-serif;\n}\n\n/* Gameboard display */\n.gameboard {\n  border: 10px solid var(--dark-blue);\n  border-radius: 3px;\n  background-color: var(--dark-blue);\n\n  display: grid;\n  grid-template: repeat(10, 1fr) / repeat(10, 1fr);\n  gap: 2px;\n\n  width: 40vw;\n  height: 40vw;\n  box-sizing: border-box;\n}\n\n.cell {\n  background-color: white;\n  border-radius: 2px;\n  cursor: crosshair;\n}\n\n#computer .cell {\n  background-color: #bbb;\n}\n\n.cell:hover,\n#computer .cell:hover {\n  background-color: #ddd;\n}\n\n.cell.has-ship {\n  background-color: var(--light-blue);\n}\n\nul.details {\n  display: flex;\n  justify-content: space-evenly;\n  list-style-type: none;\n  font-size: 1.25rem;\n}\n\n.attacked::before {\n  content: '•';\n  color: var(--red);\n  font-size: 2rem;\n  opacity: 0.75;\n}\n\n.has-ship.attacked::before {\n  background-color: var(--red);\n  display: block;\n  height: 100%;\n  content: '';\n  opacity: 0.75;\n  border-radius: 2px;\n}\n\n.has-ship.attacked.sunk::before {\n  animation: 500ms sunk;\n  background-color: var(--purple);\n}\n\n@keyframes sunk {\n  0% {\n    transform: scale(0.1);\n    border-radius: 100%;\n    background-color: var(--red);\n  }\n\n  50% {\n    transform: scale(1.5);\n    border-radius: 100%;\n  }\n\n  100% {\n    transform: scale(1);\n    border-radius: none;\n    background-color: var(--purple);\n  }\n}\n\n#game-over-modal {\n  padding: 2em;\n  background-color: var(--light-blue);\n  border: 5px solid var(--dark-blue);\n  text-align: center;\n}\n\n#game-over-modal h2 {\n  font-size: 2rem;\n  color: var(--cream);\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,iBAAiB;EACjB,cAAc;EACd,gBAAgB;EAChB,qBAAqB;EACrB,oBAAoB;AACtB;;AAEA;EACE,mCAAmC;EACnC,uBAAuB;EACvB,gCAAgC;EAChC,yBAAyB;AAC3B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,OAAO;AACT;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,kCAAkC;EAClC,YAAY;EACZ,+BAA+B;EAC/B,eAAe;;EAEf,yBAAyB;EACzB,gCAAgC;AAClC;;AAEA,sBAAsB;AACtB;EACE,mCAAmC;EACnC,kBAAkB;EAClB,kCAAkC;;EAElC,aAAa;EACb,gDAAgD;EAChD,QAAQ;;EAER,WAAW;EACX,YAAY;EACZ,sBAAsB;AACxB;;AAEA;EACE,uBAAuB;EACvB,kBAAkB;EAClB,iBAAiB;AACnB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;;EAEE,sBAAsB;AACxB;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,aAAa;EACb,6BAA6B;EAC7B,qBAAqB;EACrB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,eAAe;EACf,aAAa;AACf;;AAEA;EACE,4BAA4B;EAC5B,cAAc;EACd,YAAY;EACZ,WAAW;EACX,aAAa;EACb,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,+BAA+B;AACjC;;AAEA;EACE;IACE,qBAAqB;IACrB,mBAAmB;IACnB,4BAA4B;EAC9B;;EAEA;IACE,qBAAqB;IACrB,mBAAmB;EACrB;;EAEA;IACE,mBAAmB;IACnB,mBAAmB;IACnB,+BAA+B;EACjC;AACF;;AAEA;EACE,YAAY;EACZ,mCAAmC;EACnC,kCAAkC;EAClC,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,mBAAmB;AACrB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Anton&display=swap');\n\n:root {\n  --purple: #3B1F2B;\n  --red: #DB162F;\n  --cream: #DBDFAC;\n  --light-blue: #5F758E;\n  --dark-blue: #383961;\n}\n\nbody {\n  background-color: var(--light-blue);\n  color: var(--dark-blue);\n  font-family: 'Anton', sans-serif;\n  text-transform: uppercase;\n}\n\nh1 {\n  font-size: 5rem;\n}\n\n#wrapper {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 5%;\n}\n\n.block {\n  text-align: center;\n}\n\nbutton {\n  font-size: 1.25rem;\n  color: var(--cream);\n  background-color: var(--dark-blue);\n  padding: 1em;\n  border: 5px solid var(--purple);\n  cursor: pointer;\n\n  text-transform: uppercase;\n  font-family: 'Anton', sans-serif;\n}\n\n/* Gameboard display */\n.gameboard {\n  border: 10px solid var(--dark-blue);\n  border-radius: 3px;\n  background-color: var(--dark-blue);\n\n  display: grid;\n  grid-template: repeat(10, 1fr) / repeat(10, 1fr);\n  gap: 2px;\n\n  width: 40vw;\n  height: 40vw;\n  box-sizing: border-box;\n}\n\n.cell {\n  background-color: white;\n  border-radius: 2px;\n  cursor: crosshair;\n}\n\n#computer .cell {\n  background-color: #bbb;\n}\n\n.cell:hover,\n#computer .cell:hover {\n  background-color: #ddd;\n}\n\n.cell.has-ship {\n  background-color: var(--light-blue);\n}\n\nul.details {\n  display: flex;\n  justify-content: space-evenly;\n  list-style-type: none;\n  font-size: 1.25rem;\n}\n\n.attacked::before {\n  content: '•';\n  color: var(--red);\n  font-size: 2rem;\n  opacity: 0.75;\n}\n\n.has-ship.attacked::before {\n  background-color: var(--red);\n  display: block;\n  height: 100%;\n  content: '';\n  opacity: 0.75;\n  border-radius: 2px;\n}\n\n.has-ship.attacked.sunk::before {\n  animation: 500ms sunk;\n  background-color: var(--purple);\n}\n\n@keyframes sunk {\n  0% {\n    transform: scale(0.1);\n    border-radius: 100%;\n    background-color: var(--red);\n  }\n\n  50% {\n    transform: scale(1.5);\n    border-radius: 100%;\n  }\n\n  100% {\n    transform: scale(1);\n    border-radius: none;\n    background-color: var(--purple);\n  }\n}\n\n#game-over-modal {\n  padding: 2em;\n  background-color: var(--light-blue);\n  border: 5px solid var(--dark-blue);\n  text-align: center;\n}\n\n#game-over-modal h2 {\n  font-size: 2rem;\n  color: var(--cream);\n}"],sourceRoot:""}]);const i=s},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(s[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&s[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),n.push(d))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},s=[],i=0;i<e.length;i++){var c=e[i],l=r.base?c[0]+r.base:c[0],d=a[l]||0,A="".concat(l," ").concat(d);a[l]=d+1;var u=t(A),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(p);else{var m=o(p,r);r.byIndex=i,n.splice(i,0,{identifier:A,updater:m,references:1})}s.push(A)}return s}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var s=0;s<a.length;s++){var i=t(a[s]);n[i].references--}for(var c=r(e,o),l=0;l<a.length;l++){var d=t(a[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),o=t.n(r),a=t(569),s=t.n(a),i=t(565),c=t.n(i),l=t(216),d=t.n(l),A=t(589),u=t.n(A),p=t(426),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=s().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;class h{constructor(e,n){this.id=e,this.length=n,this.hits=0}hit(){this.hits<=this.length&&(this.hits+=1)}get isSunk(){return this.hits===this.length}}class f{constructor(e,n){this.dimensions=e,this.board=this.generateBoard(e),this.ships=[],this.elementId=n}generateBoard(e){const n=[];for(let t=0;t<e;t+=1){const r=[];for(let n=0;n<e;n+=1){const e=new b(t,n);r.push(e)}n.push(r)}return n}generateShips(e){for(let n=0;n<e.length;n++){let t,r,o;do{t=[Math.floor(Math.random()*this.dimensions),Math.floor(Math.random()*this.dimensions)],r=Boolean(Math.round(Math.random())),o=this.isValidPlacement(t,e[n],r)}while(!1===o);this.placeShip(t,e[n],r)}}isValidPlacement([e,n],t,r){if(r){if(e+t>this.dimensions)return!1;for(let r=e;r<e+t;r+=1)if(!0===this.board[r][n].hasShip)return!1}else{if(n+t>this.dimensions)return!1;for(let r=n;r<n+t;r+=1)if(!0===this.board[e][r].hasShip)return!1}return!0}placeShip([e,n],t,r){if(!1===this.isValidPlacement([e,n],t,r))return;const o=Math.floor(1e5*Math.random());if(r)for(let r=e;r<e+t;r+=1)this.board[r][n].hasShip=!0,this.board[r][n].shipId=o;else for(let r=n;r<n+t;r+=1)this.board[e][r].hasShip=!0,this.board[e][r].shipId=o;this.ships.push(new h(o,t))}receiveAttack([e,n]){const t=this.board[e][n];let r=!1,o=!1,a={};if(t.beenAttacked)throw new Error("Duplicate attack");return t.beenAttacked=!0,t.hasShip&&(r=!0,a=this.ships.find((e=>e.id===t.shipId)),a.hit(),!0===a.isSunk&&(o=!0)),this.renderAttack([e,n],r,o,a),[r,o]}renderAttack(e,n,t,r){const o=document.querySelector(`#${this.elementId} [data-coordinates='${e.toString()}']`);if(o.classList.add("attacked"),n&&(o.classList.add("has-ship"),o.dataset.ship=r.id),t){const e=document.querySelectorAll(`[data-ship='${r.id}']`);let n=0;e.forEach((e=>{setTimeout((()=>{e.classList.add("sunk")}),n),n+=200}))}document.querySelector(`#${this.elementId} li.ships`).textContent=`Remaining ships: ${this.remainingShips}`}get remainingShips(){return this.ships.filter((e=>!e.isSunk)).length}get allSunk(){return this.ships.every((e=>e.isSunk))}}class b{constructor(e,n){this.coordinates=[e,n],this.hasShip=!1,this.beenAttacked=!1}}class g{constructor(e,n=!1){this.name=e;const t=this.name.replace(/[^a-zA-Z0-9]/g,"").toLowerCase();this.gameboard=new f(10,t),this.opponent=null,this.myTurn=n,this.previousMoves=new Set,this.isComputer=!1}attackOpponent([e,n]){if(!1===this.myTurn)throw new Error("Not my turn!");const t=this.gameboard.dimensions;if(e<0||e>=t||n<0||n>=t)throw new Error("Out of bounds");return this.myTurn=!1,this.opponent.myTurn=!0,this.opponent.gameboard.receiveAttack([e,n])}generateAiMove(){let e;do{e=[Math.floor(Math.random()*this.gameboard.dimensions),Math.floor(Math.random()*this.gameboard.dimensions)]}while(this.previousMoves.has(e.toString()));return this.previousMoves.add(e.toString()),this.attackOpponent(e)}get totalMoves(){let e=this.opponent.gameboard.board.flat();return e=e.filter((e=>!0===e.beenAttacked)),e.length}}class C{constructor(){this.playerOne=new g("You",!0),this.playerTwo=new g("Computer"),this.gameOver=!1,this.playerOne.opponent=this.playerTwo,this.playerTwo.opponent=this.playerOne,this.playerTwo.isComputer=!0}playGame(){document.addEventListener("click",(()=>{this.gameOver||this.playTurn()}))}playTurn(){this.playerOne;const e=this.playerTwo;this.calculateGameOver(),this.gameOver||(e.myTurn&&e.generateAiMove(),this.calculateGameOver())}calculateGameOver(){const e=this.playerOne,n=this.playerTwo;n.gameboard.allSunk?(this.gameOver=!0,this.announceGameOver(e,n)):e.gameboard.allSunk&&(this.gameOver=!0,this.announceGameOver(n,e))}announceGameOver(e,n){setTimeout((()=>{const n=document.querySelector("#game-over-modal");document.querySelector("#winner-text").textContent=`${e.name} won in ${e.totalMoves} moves with ${e.gameboard.remainingShips} remaining ships.`,n.showModal()}),500)}}let v;function E(){const e=document.querySelector("#wrapper");for(;e.firstChild;)e.removeChild(e.firstChild);const n=B(v.playerOne),t=B(v.playerTwo),r=function(){const e=document.createElement("dialog");e.setAttribute("id","game-over-modal");const n=document.createElement("h2");n.textContent="Game Over!";const t=document.createElement("h3");t.setAttribute("id","winner-text");const r=document.createElement("button");return r.setAttribute("id","new-game-button"),r.textContent="New Game",r.addEventListener("click",(e=>{document.querySelector("#game-over-modal"),v=new C,v.playerOne.gameboard.generateShips([5,4,3,3,2]),v.playerTwo.gameboard.generateShips([5,4,3,3,2]),v.playGame(),E()})),e.append(n,t,r),e}();e.append(n,t,r)}function B(e){const n=document.createElement("div");n.setAttribute("class","block"),n.setAttribute("id",e.name.replace(/[^a-zA-Z0-9]/g,"").toLowerCase());const t=document.createElement("h2");t.textContent=e.name;const r=document.createElement("div");r.setAttribute("class","gameboard");const o=e.gameboard.dimensions;for(let n=0;n<o;n+=1)for(let t=0;t<o;t+=1){const o=e.gameboard.board[n][t],a=document.createElement("div");a.setAttribute("class","cell"),a.dataset.coordinates=`${n},${t}`,!1===e.isComputer&&o.hasShip&&(a.classList.add("has-ship"),a.dataset.ship=o.shipId),!0===e.isComputer&&a.addEventListener("click",(r=>{e.opponent.attackOpponent([n,t])})),r.append(a)}const a=document.createElement("ul");a.setAttribute("class","details");const s=document.createElement("li");return s.setAttribute("class","ships"),s.textContent=`Remaining ships: ${e.gameboard.ships.length}`,a.append(s),n.append(t,r,a),n}!function(){const e=document.querySelector("body"),n=document.createElement("div");n.setAttribute("id","wrapper");const t=document.createElement("div");t.setAttribute("class","block");const r=document.createElement("h1");r.textContent="Battleship";const o=document.createElement("button");o.setAttribute("id","new-game-button"),o.textContent="New Game",o.addEventListener("click",(e=>{v=new C,v.playerOne.gameboard.generateShips([5,4,3,3,2]),v.playerTwo.gameboard.generateShips([5,4,3,3,2]),v.playGame(),E()})),t.append(r,o),n.append(t),e.append(n)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,